<?php

/**
 * @file
 * Primary hook implementations for the Media Fotoweb Manualcrop module.
 */

/**
 * Alter the file path for manualcrop selection.
 *
 * That is needed, because manualcrop settings are stored for $file->uri not,
 * image style path.
 *
 * @param StdClass $file
 *   Drupal file object to be altered.
 */
function media_fotoweb_manualcrop_load_crop_selection_alter(StdClass &$file) {
  module_load_include('inc', 'media_fotoweb', 'includes/media_fotoweb.helper');
  $hash = _media_fotoweb_extract_hash_from_uri($file);
  if ($original_file_uri = _media_fotoweb_find_uri_by_hash($hash)) {
    $file = $original_file_uri;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function media_fotoweb_manualcrop_field_widget_form_alter(&$element, &$form_state, $context) {
  if (user_access('use manualcrop')) {
    $widget = $context['instance']['widget'];

    if (manualcrop_supported_widgets($widget['type'])) {
      if (!empty($widget['settings']['manualcrop_enable'])) {
        foreach (element_children($element) as $key) {
          $element[$key]['#process'][] = '_media_fotoweb_manualcrop_widget_process';
        }
      }
    }
  }
}

/**
 * Inject file_entity dimension information into manualcrop widget.
 *
 * That is needed because the image_get_info() function is not working properly
 * for custom remote stream wrapper.
 *
 * @param array $element
 *   The field widget form element as constructed by hook_field_widget_form().
 * @param array $form_state
 *   An associative array containing the current state of the form.
 * @param array $form
 *   An associative array containing the form.
 *
 * @see hook_field_widget_form_alter()
 *
 * @return array
 *   The processed widget element.
 */
function _media_fotoweb_manualcrop_widget_process(array $element, array &$form_state, array $form) {
  $dimensions = array('width', 'height');
  if (isset($element['manualcrop_overlay'])) {
    $fid = $element['#file']->fid;
    $wrapper = file_stream_wrapper_get_instance_by_uri($form_state['manualcrop_data']['images'][$fid]['uri']);

    if ($wrapper instanceof FotowebStreamWrapper) {
      foreach ($dimensions as $dimension) {
        if (array_key_exists($dimension, $element['manualcrop_overlay']['#image']) && !empty($element['#file']->{$dimension})) {
          // Set dimensions for initial overlay data.
          $element['manualcrop_overlay']['#image'][$dimension] = $element['#file']->{$dimension};

          // Set $form_state['manualcrop_data'], too, because it is used for
          // manualcrop element validation.
          if (isset($form_state['manualcrop_data']['images'][$fid])) {
            $form_state['manualcrop_data']['images'][$fid][$dimension] = $element['#file']->{$dimension};
          }
        }
      }
      // Inject local path uri, to let manualcrop flush the image styles and
      // recreate.
      $form_state['manualcrop_data']['images'][$fid]['uri'] = $wrapper->getLocalImageUri();
    }
  }

  return $element;
}

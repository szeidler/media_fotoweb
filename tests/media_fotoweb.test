<?php

class MediaFotowebAdminSettingsTestCase extends DrupalWebTestCase {

  protected $privilegedUser;

  public static function getInfo() {
    return array(
      'name' => 'Media Fotoweb admin settings',
      'description' => 'Test media fotoweb administration page functionality.',
      'group' => 'Media Fotoweb',
    );
  }

  public function setUp() {
    parent::setUp('media_fotoweb');
    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer media_fotoweb settings'
    ));
    $this->drupalLogin($this->privilegedUser);
  }

  public function testAdminSettingsForm() {
    $this->drupalGet('admin/config/media/fotoweb');
    $this->assertResponse(200, 'User is allowed to access the settings page.');
    $this->assertFieldByXpath("//form[@id='media-fotoweb-admin-settings']//input[@name='media_fotoweb_server']", '', 'Server field is present.');
    $this->assertFieldByXpath("//form[@id='media-fotoweb-admin-settings']//input[@name='media_fotoweb_full_api_key']", '', 'Full API Key field is present.');
    $this->assertFieldByXpath("//form[@id='media-fotoweb-admin-settings']//input[@name='media_fotoweb_selection_widget_use_sso']", '', 'Full API Key field is present.');
    $this->assertFieldByXpath("//form[@id='media-fotoweb-admin-settings']//input[@name='media_fotoweb_encryption_secret']", '', 'Encryption secret field is present.');
    $this->assertFieldByXpath("//form[@id='media-fotoweb-admin-settings']//input[@name='media_fotoweb_selection_widget_height']", '500', 'Widget height field is present.');
    $this->assertFieldByXpath("//form[@id='media-fotoweb-admin-settings']//select[@name='media_fotoweb_local_file_storage_type']", 'preview', 'Storage selection field is present.');
    $this->assertFieldByXpath("//form[@id='media-fotoweb-admin-settings']//input[@name='media_fotoweb_local_file_size_threshold']", '1500', 'File size threshold field is present.');
    $this->assertFieldByXpath("//form[@id='media-fotoweb-admin-settings']//select[@name='media_fotoweb_asset_update_trigger']", 'new', 'Asset update trigger field is present.');
  }

}

class MediaFotowebStreamWrapperTest extends DrupalWebTestCase {

  protected $classname = 'FotowebStreamWrapper';
  protected $scheme = 'fotoweb';

  public static function getInfo() {
    return array(
      'name' => 'Media Fotoweb Stream Wrapper',
      'description' => 'Tests fotoweb stream wrapper functions.',
      'group' => 'Media Fotoweb',
    );
  }

  function setUp() {
    parent::setUp('media_fotoweb');
    drupal_static_reset('file_get_stream_wrappers');
  }

  function testGetClassName() {
    $this->assertEqual($this->classname, file_stream_wrapper_get_class($this->scheme), 'Got correct class name for fotoweb scheme.');
  }

  function testGetInstanceByScheme() {
    $instance = file_stream_wrapper_get_instance_by_scheme($this->scheme);
    $this->assertEqual($this->classname, get_class($instance), 'Got correct class type for fotoweb scheme.');
  }

  function testUriFunctions() {
    $instance = file_stream_wrapper_get_instance_by_uri($this->scheme . '://foo');
    $this->assertEqual($this->classname, get_class($instance), 'Got correct class type for fotoweb URI.');

    $this->assertEqual(file_stream_wrapper_get_instance_by_scheme('fotoweb')->getDirectoryPath(), variable_get('file_public_path', conf_path() . '/files') . '/media-fotoweb', 'Expected fotoweb directory path was returned.');
  }

}
